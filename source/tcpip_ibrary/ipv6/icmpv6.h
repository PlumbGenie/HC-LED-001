/**
  ICMPv6 Protocol Header file

  Company:
    Microchip Technology Inc.

  File Name:
    icmpv6.h

  Summary:
    This is the header file for icmpv6.c

  Description:
    This header file provides the API for the ICMPv6 protocol

 */

/*

©  [2016] Microchip Technology Inc. and its subsidiaries.  You may use this software
and any derivatives exclusively with Microchip products.

THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS".  NO WARRANTIES, WHETHER EXPRESS,
IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED WARRANTIES OF
NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE, OR ITS
INTERACTION WITH MICROCHIP PRODUCTS, COMBINATION WITH ANY OTHER PRODUCTS, OR USE
IN ANY APPLICATION.

IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE, INCIDENTAL
OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND WHATSOEVER RELATED
TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS BEEN ADVISED OF THE POSSIBILITY
OR THE DAMAGES ARE FORESEEABLE.  TO THE FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S
TOTAL LIABILITY ON ALL CLAIMS IN ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED
THE AMOUNT OF FEES, IF ANY, THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.

MICROCHIP PROVIDES THIS SOFTWARE CONDITIONALLY UPON YOUR ACCEPTANCE OF THESE TERMS.

*/


#ifndef ICMPV6_H
#define ICMPV6_H

/**
  Section: Included Files
*/
#include <stdbool.h>
#include "tcpip_types.h"
#include "ipv6.h"

/**
  Section: Macro Declarations
*/
/** ICMPv6 Message Types */
    // RFC 4443
#define ICMPV6_DESTINATION_UNREACHABLE_ERROR            (1)
#define ICMPV6_PACKET_TOO_BIG_ERROR                     (2)
#define ICMPV6_TIME_EXCEEDED_ERROR                      (3)
#define ICMPV6_PARAMETER_PROBLEM_ERROR                  (4)

#define ICMPV6_ECHO_REQUEST                             (128)
#define ICMPV6_ECHO_REPLY                               (129)

#define ICMPV6_MLD_QUERY                                (130)
#define ICMPV6_MLD_REPORT                               (131)
#define ICMPV6_MLD_DONE                                 (132)

#define ICMPV6_ROUTER_SOLICITATION                      (133)
#define ICMPV6_ROUTER_ADVERTISMENT                      (134)
#define ICMPV6_NEIGHBOR_SOLICITATION                    (135)
#define ICMPV6_NEIGHBOR_ADVERTISEMENT                   (136)
#define ICMPV6_REDIRECT                                 (137)

    // RFC 3810
#define ICMPV6_V2MLD_REPORT                             (143)

/** Neighbor Discovery Option Formats */
#define ICMPV6_NO_OPT                                   (0)
#define ICMPV6_SOURCE_LL_ADDR_OPT                       (1)
#define ICMPV6_TARGET_LL_ADDR_OPT                       (2)
#define ICMPV6_PREFIX_INFO_OPT                          (3)
#define ICMPV6_REDIRECT_HEADER_OPT                      (4)
#define ICMPV6_MTU_OPT                                  (5)

/** ICMPv6 Message Codes */
//** Destination Unreachable Message
//      generated by a router, or by the originating node
#define ICMPV6_NO_ROUTE_TO_DESTINATION_CODE                         (0)
#define ICMPV6_COMMUNICATION_PROHIBITED_CODE                        (1)
#define ICMPV6_BEYOND_SCOPE_OF_SOURCE_ADDRESS_CODE                  (2)
#define ICMPV6_ADDRESS_UNREACHABLE_CODE                             (3)
#define ICMPV6_PORT_UNREACHABLE_CODE                                (4)
#define ICMPV6_SOURCE_ADDRESS_FAILED_INGRESS_EGRESS_POLICY_CODE     (5)
#define ICMPV6_REJECT_ROUTE_TO_DESTINATION_CODE                     (6)

//** Packet Too Big Message
//      generated by a router

//** Time Exceeded Message
//      generated by a router, or by the processing node
#define ICMPV6_HOP_LIMIT_EXCEEDED_IN_TRANSIT_CODE                   (0)
#define ICMPV6_FRAGMENT_REASSEMBLY_TIME_EXCEEDED_CODE               (1)

//** Parameter Problem Message
//      generated by the processing node
#define ICMPV6_ERRONEOUS_HEADER_FIELD_ENCOUNTERED_CODE              (0)
#define ICMPV6_UNRECOGNIZED_NEXT_HEADER_TYPE_ENCOUNTERED_CODE       (1)
#define ICMPV6_UNRECOGNIZED_IPV6_OPTION_ENCOUNTERED_CODE            (2)

#define ICMPV6_MTU_OPT_SIZE     (48)
#define MIN_MTU                 (1280)
#define MAX_MTU                 (1500)
#define FLAG_SET                (1)
/**
  Section: Data Types Definitions
*/
typedef struct
{
    uint8_t     currentHopLimit;
    union
    {
        uint8_t     flags;
        struct
        {
            uint8_t mFlag:1;
            uint8_t oFlag:1;
            uint8_t reserved:6;
        };                
    };
    uint16_t    routerLifetime;
    uint32_t    reachableTime;
    uint32_t    retransTime;
} routerAdvMsg_t;

typedef struct
{
    union
    {
        struct
        {
            uint8_t rFlag:1;            // Router flag
            uint8_t sFlag:1;            // Solicited flag
            uint8_t oFlag:1;            // Override flag
            uint8_t reserved0:5;
            uint8_t reserved1;
            uint16_t reserved2;
        };          
        uint32_t     flags;
    };
    ipv6Address_t   targetAddr;
} neighborAdvMsg_t;

typedef struct
{
    uint8_t reserved[4];
    ipv6Address_t   targetAddr;
} neighborSolMsg_t;

typedef struct
{
    char reserved[4];
    ipv6Address_t targetAddr;
    ipv6Address_t destinationAddr;
} redirectMsg_t;

/**
  Section: ICMPv6 Functions
 */

/**Receives ICMP Packet
 *This function process all ICMPv6 Requests
 *
 * @param ipv6_hdr
 *      IPv6 Header of the received Packet
 *
 * @return
 *      N/A
 */
void ICMPv6_Receive(ipv6HeaderRx_t *ipv6Hdr);


/**
  Section: ICMPv6 Functions
 */

    /** ICMPv6 Error Messages */

/**This function sends the Destination Unreachable error message
 *
 * @param dstAddr
 *          TBD 
 * @param pldLength
 *          TBD 
 *
 * @return
 *      (1) - SUCCESS
 * @return
 *      (!=1) - FAILURE
 */
error_msg ICMPv6_DestinationUnreachableMessage(ipv6Address_t* dstAddr, uint16_t pldLength);

/**This function sends the Parameter Problem error message
 *
 * @param dstAddr
 *          TBD 
 * @param pldLength
 *          TBD 
 *
 * @return
 *      (1) - SUCCESS
 * @return
 *      (!=1) - FAILURE
 */
error_msg ICMPv6_ParameterProblemErrorMessage(ipv6Address_t* dstAddr, uint16_t pldLength, uint8_t code, uint32_t errorOffset);

    /** ICMPv6 Informational Messages */

/**This function sends a Multicast Listener Report message (Type 131)
 *
 * @param
 *
 * @return
  *      (1) - SUCCESS
 * @return
 *      (!=1) - FAILURE
 */
error_msg ICMPv6_MulticastListenerReport(void);

/**This function sends a Multicast Listener Done message (Type 132)
 *
 * @param
 *
 * @return
  *      (1) - SUCCESS
 * @return
 *      (!=1) - FAILURE
 */
error_msg ICMPv6_MulticastListenerDone(void);

/**This function sends a Router Solicitation message (Type 133)
 *
 * @param
 *
 * @return
  *      (1) - SUCCESS
 * @return
 *      (!=1) - FAILURE
 */
error_msg ICMPv6_RouterSolicitation(void);

/**This function sends a Neighbor Solicitation message (Type 135)
 *
 * @param ipv6Address_t
 *          IPv6 address of the target
 *
 * @return
  *      (1) - SUCCESS
 * @return
 *      (!=1) - FAILURE
 */
error_msg ICMPv6_NeighborSolicitation(ipv6Address_t* targetAddr);


/**This function sends a Neighbor Advertisement message (Type 136)
 *
 * @param ipv6Address_t
 *          IPv6 address of the target
 *
 * @return
 *      (1) - SUCCESS
 * @return
 *      (!=1) - FAILURE
 */
error_msg ICMPv6_NeighborAdvertisement(ipv6Address_t* targetAddr);

void ICMPv6_SetErrorCallback( void (*callbackFunction)(icmpv6Header_t *icmpv6Hdr) );

bool ICMPv6_IsPortUnreachable(uint16_t port);

void ICMPv6_ResetPortUnreachable(void);

#endif  /* ICMPV6_H */

